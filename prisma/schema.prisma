// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  MANAGEMENT
  MEMBER
}

model User {
  id         String    @id @default(cuid())
  fullName   String
  email      String    @unique
  password   String
  role       UserRole  @default(MANAGEMENT)
  active     Boolean   @default(true)
  department String?
  lastLogin  DateTime?

  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  refreshTokens       RefreshToken[]
  File                File[]
  MemberStatusHistory MemberStatusHistory[]
}

model RefreshToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  expiresAt DateTime
}

//File management

model File {
  id        String      @id @default(cuid())
  fileName  String
  fileType  FileType    @default(OTHER)
  storeType StorageType @default(LOCAL)

  mimeType    String?
  fileSize    Int?
  storagePath String //local path or S3 key
  publicUrl   String?
  checksum    String?

  entityType String? // e.g., "MEMBER", "ARTICLE"
  entityId   String? // C√≥ th·ªÉ null khi upload t·∫°m
  tempKey    String? // üîë Kh√≥a t·∫°m ƒë·ªÉ gom nh√≥m file tr∆∞·ªõc khi g√°n entityId

  category    String? // e.g., "MEMBERSHIP_APPLICATION", "BUSINESS_LICENSE"
  description String?

  folderId String?
  folder   Folder? @relation(fields: [folderId], references: [id])

  uploadedById String?
  uploadedBy   User?   @relation(fields: [uploadedById], references: [id])

  visibility FileVisibility @default(PRIVATE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  deleted Boolean @default(false)
}

model Folder {
  id         String   @id @default(cuid())
  name       String   @db.VarChar(255)
  parentId   String?
  parent     Folder?  @relation("FolderToSubFolder", fields: [parentId], references: [id])
  subFolders Folder[] @relation("FolderToSubFolder")
  files      File[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

enum FileType {
  IMAGE
  VIDEO
  AUDIO
  DOCUMENT
  PDF
  EXCEL
  OTHER
}

enum EntityType {
  MEMBER
  MEMBER_PAYMENT
}

enum FileCategory {
  MEMBERSHIP_APPLICATION // ƒê∆°n ƒëƒÉng k√Ω h·ªôi vi√™n
  BUSINESS_LICENSE // Gi·∫•y ph√©p kinh doanh
  FINANCIAL_REPORT // B√°o c√°o t√†i ch√≠nh
  PAYMENT_PROOF // ·ª¶y nhi·ªám chi, bi√™n lai
  OTHER_DOCUMENT // T√†i li·ªáu kh√°c
}

enum FileVisibility {
  PUBLIC
  PRIVATE
  INTERNAL
}

enum StorageType {
  LOCAL
  S3
}

// ===== CATEGORIES =====
enum CategoryType {
  ORGANIZATION_TYPE // Lo·∫°i h√¨nh t·ªï ch·ª©c
}

model Category {
  id     String  @id @default(cuid())
  name   String // name vi
  nameEn String? // name en

  code        String
  parentId    String? // Parent category ID for hierarchical categories
  type        CategoryType // Lo·∫°i danh m·ª•c
  description String? // M√¥ t·∫£
  isActive    Boolean      @default(true) // Tr·∫°ng th√°i ho·∫°t ƒë·ªông
  orderIndex  Int? // Th·ª© t·ª± hi·ªÉn th·ªã

  deleted   Boolean  @default(false)
  createdBy String? // Ng∆∞·ªùi t·∫°o
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([type, code])
  @@map("categories")
}

/// ======================================================
/// MEMBERSHIP MANAGEMENT (VCCI)
/// ======================================================

enum ApplicationType {
  ENTERPRISE
  ASSOCIATION
}

enum MemberStatus {
  PENDING // Ch·ªù x√©t duy·ªát
  APPROVED // ƒê∆∞·ª£c duy·ªát, tr·ªü th√†nh h·ªôi vi√™n
  REJECTED // B·ªã t·ª´ ch·ªëi
  CANCELLED // ƒê√£ h·ªßy ƒë∆°n: ch∆∞a acction s·ª≠ d·ª•ng tr·∫°ng th√°i n√†y
  ACTIVE // ƒêang ho·∫°t ƒë·ªông
  // INACTIVE // Kh√¥ng ho·∫°t ƒë·ªông
  SUSPENDED // T·∫°m ng∆∞ng
  // TERMINATED // Ch·∫•m d·ª©t t∆∞ c√°ch h·ªôi vi√™n
}

enum MemberType {
  LINKED // H·ªôi vi√™n li√™n k·∫øt
  OFFICIAL // H·ªôi vi√™n ch√≠nh th·ª©c
  HONORARY // H·ªôi vi√™n danh d·ª±
}

/// Lo·∫°i vai tr√≤ c·ªßa ng∆∞·ªùi li√™n h·ªá
enum ContactRole {
  CHAIR_PERSON
  CEO
  CHIEF_OFFICE
  SECRETARY_GENERAL
  CONTACT_1
  CONTACT_2
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

/// Danh m·ª•c lo·∫°i h√¨nh t·ªï ch·ª©c (v√≠ d·ª•: T∆∞ nh√¢n, C·ªï ph·∫ßn, TNHH,...)
enum OrganizationType {
  PRIVATE
  JOINT_STOCK
  LIMITED
  STATE_OWNED
  OTHER
}

enum FeeStatus {
  PENDING // ch·ªù x·ª≠ l√Ω
  PAID
  UNPAID
  OVERDUE
  EXEMPT
}

// enum MemberClass {
//   DIAMOND
//   GOLD
//   SILVER
//   BRONZE
//   NORMAL
// }

/// H·ªôi vi√™n (ƒë√£ g·ªôp ƒë∆°n ƒëƒÉng k√Ω & h·ªôi vi√™n ch√≠nh th·ª©c)
model Member {
  id              String          @id @default(cuid())
  code            String?         @unique
  applicationType ApplicationType
  memberType      MemberType      @default(LINKED)
  status          MemberStatus    @default(PENDING)

  // --- Th√¥ng tin c∆° b·∫£n ---
  vietnameseName  String
  englishName     String?
  abbreviation    String?
  officeAddress   String
  businessAddress String?
  telephone       String
  email           String
  website         String?
  taxCode         String?

  classification  String? // üëà Ph√¢n h·∫°ng
  feeStatus       FeeStatus? @default(PENDING) // üëà T√¨nh tr·∫°ng h·ªôi ph√≠
  feeAmount       Decimal? // üëà S·ªë ti·ªÅn h·ªôi ph√≠
  lastPaymentDate DateTime? // üëà Ng√†y ƒë√≥ng h·ªôi ph√≠ g·∫ßn nh·∫•t

  // --- Ng√†y th√°ng ---
  submittedDate DateTime? @default(now())
  approvedDate  DateTime?
  joinDate      DateTime?
  expireDate    DateTime?
  remarks       String?

  // --- Li√™n k·∫øt quan h·ªá ---
  enterpriseDetail         MemberEnterpriseDetail?
  associationDetail        MemberAssociationDetail?
  memberBusinessCategories MemberEnterpriseBusinessCategory[] // productsServices S·∫£n ph·∫©m, d·ªãch v·ª• ch√≠nh va activityArea

  contacts        MemberContact[]
  statusHistories MemberStatusHistory[]
  attachmentIds   String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  MemberPaymentHistory MemberPaymentHistory[]
}

/// Chi ti·∫øt ri√™ng cho lo·∫°i Doanh nghi·ªáp
model MemberEnterpriseDetail {
  id                       String    @id @default(cuid())
  memberId                 String    @unique
  businessRegistrationNo   String
  businessRegistrationDate DateTime?
  issuedBy                 String?
  registeredCapital        Decimal?
  totalAsset               Decimal?
  previousYearRevenue      Decimal?
  totalEmployees           Int?
  branchInfo               String?
  organizationTypes        String[] // Category codes of organization types

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

/// Chi ti·∫øt ri√™ng cho lo·∫°i H·ªôi/Hi·ªáp h·ªôi
model MemberAssociationDetail {
  id                     String    @id @default(cuid())
  memberId               String    @unique
  establishmentLicenseNo String
  establishmentDate      DateTime?
  issuedBy               String?
  totalMembers           Int?

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

/// Ng∆∞·ªùi li√™n h·ªá ho·∫∑c l√£nh ƒë·∫°o (d√πng chung)
model MemberContact {
  id          String      @id @default(cuid())
  memberId    String
  contactRole ContactRole
  fullName    String
  gender      Gender?
  telephone   String?
  mobile      String?
  email       String?
  note        String?

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

/// L·ªãch s·ª≠ thay ƒë·ªïi tr·∫°ng th√°i
model MemberStatusHistory {
  id          String       @id @default(cuid())
  memberId    String
  status      MemberStatus
  remark      String?
  changedById String?
  changedBy   User?        @relation(fields: [changedById], references: [id])
  changedAt   DateTime     @default(now())

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

model MemberEnterpriseBusinessCategory {
  memberId           String
  businessCategoryId String

  member           Member           @relation(fields: [memberId], references: [id], onDelete: Cascade)
  businessCategory BusinessCategory @relation(fields: [businessCategoryId], references: [id], onDelete: Cascade)

  @@id([memberId, businessCategoryId])
  @@map("member_business_categories")
}

model BusinessCategory {
  id       String             @id @default(cuid())
  code     String? // v√≠ d·ª•: "A", "11", "1200" ...
  name     String
  level    Int
  parentId String?
  parent   BusinessCategory?  @relation("BusinessCategoryHierarchy", fields: [parentId], references: [id])
  children BusinessCategory[] @relation("BusinessCategoryHierarchy")
  isActive Boolean            @default(true) // Tr·∫°ng th√°i ho·∫°t ƒë·ªông

  // Li√™n k·∫øt v·ªõi doanh nghi·ªáp ho·∫∑c hi·ªáp h·ªôi
  memberBusinessCategories MemberEnterpriseBusinessCategory[]

  @@map("business_categories")
}

/// L·ªãch s·ª≠ thanh to√°n h·ªôi ph√≠ c·ªßa h·ªôi vi√™n
model MemberPaymentHistory {
  id            String         @id @default(cuid())
  memberId      String
  paymentYear   Int // NƒÉm h·ªôi ph√≠ (VD: 2023, 2024)
  paymentCode   String         @unique // M√£ giao d·ªãch: VCCI-PAY-2024-001
  amount        Decimal        @default(0)
  paymentDate   DateTime
  method        PaymentMethod? // H√¨nh th·ª©c thanh to√°n
  status        PaymentStatus? @default(PAID)
  note          String?
  attachmentIds String[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  member Member @relation(fields: [memberId], references: [id], onDelete: Cascade)
}

enum PaymentStatus {
  PENDING // Ch∆∞a thanh to√°n
  PAID // ƒê√£ thanh to√°n
  CANCELLED // H·ªßy giao d·ªãch
}

enum PaymentMethod {
  CASH // Ti·ªÅn m·∫∑t
  BANK_TRANSFER // Chuy·ªÉn kho·∫£n
  ONLINE // Thanh to√°n tr·ª±c tuy·∫øn
}
