import { Injectable, Logger } from '@nestjs/common';
import { PrismaService } from '../../common/prisma.service';
import * as fs from 'fs';
import * as path from 'path';

export interface SeedResult {
  success: boolean;
  message: string;
  seedsExecuted: string[];
  errors: string[];
  executionTime: number;
}

@Injectable()
export class DatabaseSeederService {
  private readonly logger = new Logger(DatabaseSeederService.name);
  private readonly seedsPath = path.join(process.cwd(), 'prisma', 'seeds');

  constructor(private readonly prisma: PrismaService) {}

  /**
   * Ch·∫°y t·∫•t c·∫£ c√°c seed files m·ªôt c√°ch an to√†n khi tri·ªÉn khai
   * S·ª≠ d·ª•ng ON CONFLICT DO NOTHING ƒë·ªÉ tr√°nh l·ªói duplicate
   */
  async runAllSeeds(): Promise<SeedResult> {
    const startTime = Date.now();
    const result: SeedResult = {
      success: true,
      message: '',
      seedsExecuted: [],
      errors: [],
      executionTime: 0,
    };

    try {
      this.logger.log('üå± B·∫Øt ƒë·∫ßu ch·∫°y database seeds...');

      // L·∫•y danh s√°ch t·∫•t c·∫£ seed files, s·∫Øp x·∫øp theo th·ª© t·ª±
      const seedFiles = this.getSeedFiles();

      if (seedFiles.length === 0) {
        result.message = 'Kh√¥ng t√¨m th·∫•y seed files n√†o';
        this.logger.warn(result.message);
        return result;
      }

      this.logger.log(
        `üìã T√¨m th·∫•y ${seedFiles.length} seed files: ${seedFiles.join(', ')}`,
      );

      // Ch·∫°y t·ª´ng seed file theo th·ª© t·ª±
      for (const seedFile of seedFiles) {
        try {
          await this.executeSeedFile(seedFile);
          result.seedsExecuted.push(seedFile);
          this.logger.log(`‚úÖ Th√†nh c√¥ng: ${seedFile}`);
        } catch (error) {
          const errorMessage = `L·ªói khi ch·∫°y ${seedFile}: ${error.message}`;
          result.errors.push(errorMessage);
          this.logger.error(`‚ùå ${errorMessage}`);

          // Ti·∫øp t·ª•c ch·∫°y c√°c seed kh√°c thay v√¨ d·ª´ng l·∫°i
          result.success = false;
        }
      }

      result.executionTime = Date.now() - startTime;

      if (result.success) {
        result.message = `‚úÖ Ho√†n th√†nh seeds th√†nh c√¥ng! ƒê√£ ch·∫°y ${result.seedsExecuted.length} seeds trong ${result.executionTime}ms`;
        this.logger.log(result.message);
      } else {
        result.message = `‚ö†Ô∏è Ho√†n th√†nh v·ªõi m·ªôt s·ªë l·ªói. Th√†nh c√¥ng: ${result.seedsExecuted.length}, L·ªói: ${result.errors.length}`;
        this.logger.warn(result.message);
      }
    } catch (error) {
      result.success = false;
      result.message = `L·ªói nghi√™m tr·ªçng khi ch·∫°y seeds: ${error.message}`;
      result.errors.push(result.message);
      result.executionTime = Date.now() - startTime;
      this.logger.error(result.message, error.stack);
    }

    return result;
  }

  /**
   * Ch·∫°y m·ªôt seed file c·ª• th·ªÉ
   */
  async executeSeedFile(fileName: string): Promise<void> {
    const filePath = path.join(this.seedsPath, fileName);

    if (!fs.existsSync(filePath)) {
      throw new Error(`Seed file kh√¥ng t·ªìn t·∫°i: ${fileName}`);
    }

    this.logger.log(`üîÑ ƒêang ch·∫°y seed: ${fileName}`);

    // ƒê·ªçc n·ªôi dung SQL file
    const sqlContent = fs.readFileSync(filePath, 'utf8');

    if (!sqlContent.trim()) {
      throw new Error(`Seed file r·ªóng: ${fileName}`);
    }

    // Ki·ªÉm tra xem c√≥ s·ª≠ d·ª•ng ON CONFLICT hay kh√¥ng
    if (!sqlContent.includes('ON CONFLICT')) {
      this.logger.warn(
        `‚ö†Ô∏è Seed file ${fileName} kh√¥ng s·ª≠ d·ª•ng ON CONFLICT - c√≥ th·ªÉ g√¢y l·ªói duplicate`,
      );
    }

    // Th·ª±c thi SQL
    try {
      await this.prisma.$executeRawUnsafe(sqlContent);
      this.logger.log(`‚úÖ Ho√†n th√†nh seed: ${fileName}`);
    } catch (error) {
      // Log chi ti·∫øt l·ªói SQL ƒë·ªÉ debug
      this.logger.error(`SQL Error in ${fileName}:`, {
        error: error.message,
        code: error.code,
        sqlContent: sqlContent.substring(0, 200) + '...', // Hi·ªÉn th·ªã 200 k√Ω t·ª± ƒë·∫ßu
      });
      throw error;
    }
  }

  /**
   * L·∫•y danh s√°ch seed files ƒë√£ s·∫Øp x·∫øp theo th·ª© t·ª±
   */
  private getSeedFiles(): string[] {
    try {
      if (!fs.existsSync(this.seedsPath)) {
        this.logger.warn(`Th∆∞ m·ª•c seeds kh√¥ng t·ªìn t·∫°i: ${this.seedsPath}`);
        return [];
      }

      const files = fs
        .readdirSync(this.seedsPath)
        .filter((file) => file.endsWith('.sql'))
        .sort(); // S·∫Øp x·∫øp theo t√™n file (theo th·ªùi gian do format YYYYMMDD)

      return files;
    } catch (error) {
      this.logger.error(`L·ªói khi ƒë·ªçc th∆∞ m·ª•c seeds: ${error.message}`);
      return [];
    }
  }

  /**
   * Ki·ªÉm tra tr·∫°ng th√°i c√°c seed ƒë√£ ƒë∆∞·ª£c ch·∫°y ch∆∞a
   */
  async checkSeedStatus(): Promise<{
    organizationTypesCount: number;
  }> {
    try {
      const organizationTypesCount = await this.prisma.category.count({
        where: {
          type: 'ORGANIZATION_TYPE',
          deleted: false,
        },
      });

      return {
        organizationTypesCount,
      };
    } catch (error) {
      this.logger.error(`L·ªói khi ki·ªÉm tra seed status: ${error.message}`);
      throw error;
    }
  }

  /**
   * Ch·∫°y seed cho deployment an to√†n
   * C√≥ th·ªÉ ƒë∆∞·ª£c g·ªçi nhi·ªÅu l·∫ßn m√† kh√¥ng g√¢y l·ªói
   */
  async safeDeploymentSeed(): Promise<SeedResult> {
    this.logger.log('üöÄ B·∫Øt ƒë·∫ßu safe deployment seeding...');

    // Ki·ªÉm tra tr·∫°ng th√°i hi·ªán t·∫°i
    const beforeStatus = await this.checkSeedStatus();
    this.logger.log('üìä Tr·∫°ng th√°i tr∆∞·ªõc khi seed:', beforeStatus);

    // Ch·∫°y seeds
    const result = await this.runAllSeeds();

    // Ki·ªÉm tra tr·∫°ng th√°i sau khi ch·∫°y
    const afterStatus = await this.checkSeedStatus();
    this.logger.log('üìä Tr·∫°ng th√°i sau khi seed:', afterStatus);

    // Th√™m th√¥ng tin v·ªÅ s·ªë l∆∞·ª£ng records
    result.message += `\nüìä Tr·∫°ng th√°i sau seeding:
- Organization types: ${afterStatus.organizationTypesCount}`;

    return result;
  }
}

