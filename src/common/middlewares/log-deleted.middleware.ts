import { Prisma } from '@prisma/client';

/**
 * Middleware t·ª± ƒë·ªông l∆∞u record b·ªã x√≥a v√†o b·∫£ng deleted_history
 * 
 * Ho·∫°t ƒë·ªông:
 * - Tr∆∞·ªõc khi x√≥a (delete/deleteMany), l·∫•y b·∫£n sao d·ªØ li·ªáu
 * - T·ª± ƒë·ªông ph√°t hi·ªán cascade relations s·ª≠ d·ª•ng Prisma.dmmf (public API)
 * - L·∫•y data c·ªßa records con tr∆∞·ªõc khi b·ªã cascade delete
 * - Sau khi x√≥a th√†nh c√¥ng, l∆∞u v√†o DeletedHistory k√®m cascade data
 * - L∆∞u c·∫£ th√¥ng tin ng∆∞·ªùi x√≥a n·∫øu c√≥ trong context
 * 
 * @note S·ª≠ d·ª•ng Prisma.dmmf thay v√¨ prisma._dmmf (deprecated t·ª´ v4.16+)
 * @note T·ª´ Prisma 5+, kh√¥ng c·∫ßn type Prisma.Middleware n·ªØa - Prisma s·∫Ω t·ª± infer type
 */

/**
 * L·∫•y danh s√°ch c√°c model c√≥ quan h·ªá onDelete: Cascade t·ªõi targetModel
 * S·ª≠ d·ª•ng Prisma.dmmf (public API) thay v√¨ prisma._dmmf (private API deprecated)
 */
function getCascadeRelations(targetModel: string) {
  const cascadeRelations: Array<{
    model: string;
    field: string;
    relationFromFields: readonly string[];
  }> = [];

  try {
    // S·ª≠ d·ª•ng Prisma.dmmf - static metadata t·ª´ schema
    const models = Prisma.dmmf.datamodel.models;

    // Duy·ªát t·∫•t c·∫£ c√°c model
    for (const model of models) {
      for (const field of model.fields) {
        // Ki·ªÉm tra field c√≥ ph·∫£i l√† relation v√† c√≥ onDelete: Cascade kh√¥ng
        if (
          field.kind === 'object' &&
          field.relationFromFields?.length &&
          field.relationOnDelete === 'Cascade' &&
          field.type === targetModel
        ) {
          cascadeRelations.push({
            model: model.name,
            field: field.name,
            relationFromFields: field.relationFromFields,
          });
        }
      }
    }
  } catch (error) {
    console.error('[LogDeletedMiddleware] Failed to get cascade relations:', error);
  }

  return cascadeRelations;
}

/**
 * L·∫•y d·ªØ li·ªáu c·ªßa c√°c records con c√≥ cascade relation
 */
async function getCascadeLinkedData(
  prismaClient: any,
  modelName: string,
  modelKey: string,
  recordId: string
) {
  const cascades = getCascadeRelations(modelName);
  const cascadeData: Record<string, any[]> = {};

  for (const rel of cascades) {
    try {
      const relModelKey = rel.model.charAt(0).toLowerCase() + rel.model.slice(1);
      
      // Build where condition d·ª±a tr√™n relationFromFields
      const whereCondition: any = {};
      for (const fromField of rel.relationFromFields) {
        whereCondition[fromField] = recordId;
      }

      const linkedRecords = await prismaClient[relModelKey].findMany({
        where: whereCondition,
      });

      if (linkedRecords && linkedRecords.length > 0) {
        cascadeData[rel.model] = linkedRecords;
        console.log(`[LogDeletedMiddleware] üîó Found ${linkedRecords.length} cascade records in ${rel.model}`);
      }
    } catch (error) {
      console.error(`[LogDeletedMiddleware] Failed to fetch cascade data for ${rel.model}:`, error);
    }
  }

  return cascadeData;
}

/**
 * T·∫°o Prisma Client Extension ƒë·ªÉ log deleted records
 * S·ª≠ d·ª•ng $extends API thay v√¨ $use middleware (deprecated t·ª´ Prisma 5+)
 */
export function createLogDeletedExtension(
  prismaClient: any,
  getUserId?: () => string | undefined
) {
  return {
    query: {
      $allModels: {
        async delete({ model, operation, args, query }) {
          // L·∫•y d·ªØ li·ªáu tr∆∞·ªõc khi x√≥a
          const modelKey = model.charAt(0).toLowerCase() + model.slice(1);
          let recordBeforeDelete: any = null;
          let cascadeData: Record<string, any[]> = {};

          try {
            // L·∫•y record tr∆∞·ªõc khi x√≥a
            recordBeforeDelete = await prismaClient[modelKey].findUnique({
              where: args.where,
            });

            if (recordBeforeDelete) {
              // L·∫•y cascade data n·∫øu c√≥
              cascadeData = await getCascadeLinkedData(
                prismaClient,
                model,
                modelKey,
                recordBeforeDelete.id
              );
            }
          } catch (error) {
            console.error(`[LogDeletedExtension] ‚ùå Failed to fetch record before delete for ${model}:`, error);
          }

          // Th·ª±c hi·ªán x√≥a
          const result = await query(args);

          // L∆∞u log n·∫øu c√≥ record b·ªã x√≥a
          if (recordBeforeDelete) {
            await saveDeletedRecord(
              prismaClient,
              model,
              recordBeforeDelete,
              cascadeData,
              getUserId?.()
            );
          }

          return result;
        },

        async deleteMany({ model, operation, args, query }) {
          // L·∫•y d·ªØ li·ªáu tr∆∞·ªõc khi x√≥a
          const modelKey = model.charAt(0).toLowerCase() + model.slice(1);
          let recordsBeforeDelete: Array<{
            record: any;
            cascadeData?: Record<string, any[]>;
          }> = [];

          try {
            // L·∫•y records tr∆∞·ªõc khi x√≥a
            const records = await prismaClient[modelKey].findMany({
              where: args.where,
            });

            if (records && records.length > 0) {
              // L·∫•y cascade data cho t·ª´ng record
              for (const record of records) {
                const cascadeData = await getCascadeLinkedData(
                  prismaClient,
                  model,
                  modelKey,
                  record.id
                );
                
                recordsBeforeDelete.push({
                  record,
                  cascadeData: Object.keys(cascadeData).length > 0 ? cascadeData : undefined,
                });
              }
            }
          } catch (error) {
            console.error(`[LogDeletedExtension] ‚ùå Failed to fetch records before delete for ${model}:`, error);
          }

          // Th·ª±c hi·ªán x√≥a
          const result = await query(args);

          // L∆∞u log cho t·ª´ng record b·ªã x√≥a
          for (const item of recordsBeforeDelete) {
            await saveDeletedRecord(
              prismaClient,
              model,
              item.record,
              item.cascadeData || {},
              getUserId?.()
            );
          }

          return result;
        }
      }
    }
  };
}

/**
 * Helper function ƒë·ªÉ l∆∞u deleted record v√†o history
 */
async function saveDeletedRecord(
  prismaClient: any,
  model: string,
  record: any,
  cascadeData: Record<string, any[]>,
  deletedBy?: string
) {
  try {
    // Prepare data structure
    const dataToSave: any = {
      ...record,
    };

    // N·∫øu c√≥ cascade data, l∆∞u v√†o metadata
    if (cascadeData && Object.keys(cascadeData).length > 0) {
      dataToSave._cascadeDeleted = cascadeData;
      
      const cascadeSummary = Object.entries(cascadeData)
        .map(([model, records]) => `${model}(${records.length})`)
        .join(', ');
      console.log(`[LogDeletedExtension] üîó Cascade data: ${cascadeSummary}`);
    }

    await prismaClient.deletedHistory.create({
      data: {
        table: model,
        objectId: record.id ?? 'unknown',
        data: dataToSave,
        deletedBy,
      },
    });
    console.log(`[LogDeletedExtension] ‚úÖ Saved deleted record: ${record.id}`);
  } catch (err) {
    console.error(
      `[LogDeletedExtension] ‚ùå Failed to save history for ${model}:`,
      err
    );
  }
}

