{
  "openapi": "3.0.0",
  "paths": {
    "/api": {
      "get": {
        "operationId": "AppController_getHello",
        "parameters": [],
        "responses": {
          "200": {
            "description": ""
          }
        },
        "tags": [
          "App"
        ]
      }
    },
    "/api/auth/login": {
      "post": {
        "operationId": "AuthController_login",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/LoginDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Login successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string"
                    },
                    "refreshToken": {
                      "type": "string"
                    },
                    "user": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string"
                        },
                        "email": {
                          "type": "string"
                        },
                        "fullName": {
                          "type": "string"
                        },
                        "role": {
                          "type": "string"
                        },
                        "department": {
                          "type": "string"
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid credentials"
          }
        },
        "summary": "User login",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/logout": {
      "post": {
        "operationId": "AuthController_logout",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Logout successful",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "User logout",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/refresh-token": {
      "post": {
        "operationId": "AuthController_refreshToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Token refreshed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "accessToken": {
                      "type": "string"
                    },
                    "refreshToken": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid refresh token"
          }
        },
        "summary": "Refresh access token",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/change-password": {
      "post": {
        "operationId": "AuthController_changePassword",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangePasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password changed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Current password is incorrect"
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Change user password",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/profile": {
      "get": {
        "operationId": "AuthController_getProfile",
        "parameters": [],
        "responses": {
          "200": {
            "description": "User profile retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "email": {
                      "type": "string"
                    },
                    "fullName": {
                      "type": "string"
                    },
                    "role": {
                      "type": "string"
                    },
                    "department": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get current user profile",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/revoke-refresh-token": {
      "post": {
        "operationId": "AuthController_revokeRefreshToken",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefreshTokenDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Refresh token revoked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Revoke a specific refresh token",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/revoke-all-refresh-tokens": {
      "post": {
        "operationId": "AuthController_revokeAllRefreshTokens",
        "parameters": [],
        "responses": {
          "200": {
            "description": "All refresh tokens revoked successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Revoke all refresh tokens for current user",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/auth/refresh-tokens": {
      "get": {
        "operationId": "AuthController_getUserRefreshTokens",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Refresh tokens retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "token": {
                        "type": "string"
                      },
                      "createdAt": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "expiresAt": {
                        "type": "string",
                        "format": "date-time"
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all active refresh tokens for current user",
        "tags": [
          "Authentication"
        ]
      }
    },
    "/api/users": {
      "post": {
        "operationId": "UsersController_create",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateUserDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "User created successfully"
          },
          "409": {
            "description": "Email already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create a new user",
        "tags": [
          "Users"
        ]
      },
      "get": {
        "operationId": "UsersController_findAll",
        "parameters": [
          {
            "name": "search",
            "required": false,
            "in": "query",
            "description": "Search by email or full name",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "role",
            "required": false,
            "in": "query",
            "description": "Filter by role",
            "schema": {
              "type": "string",
              "enum": [
                "SUPER_ADMIN",
                "ADMIN",
                "MANAGEMENT",
                "MEMBER"
              ]
            }
          },
          {
            "name": "active",
            "required": false,
            "in": "query",
            "description": "Filter by active status",
            "schema": {
              "type": "boolean"
            }
          },
          {
            "name": "department",
            "required": false,
            "in": "query",
            "description": "Filter by department",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "includeDeleted",
            "required": false,
            "in": "query",
            "description": "Include deleted users",
            "schema": {
              "default": false,
              "type": "boolean"
            }
          },
          {
            "name": "page",
            "required": false,
            "in": "query",
            "description": "Page number",
            "schema": {
              "default": 1,
              "type": "number"
            }
          },
          {
            "name": "limit",
            "required": false,
            "in": "query",
            "description": "Items per page",
            "schema": {
              "default": 10,
              "type": "number"
            }
          },
          {
            "name": "sortBy",
            "required": false,
            "in": "query",
            "description": "Sort by field",
            "schema": {
              "default": "createdAt",
              "type": "string"
            }
          },
          {
            "name": "sortOrder",
            "required": false,
            "in": "query",
            "description": "Sort order (asc/desc)",
            "schema": {
              "default": "desc",
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Users retrieved successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get all users with filtering and pagination",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/stats": {
      "get": {
        "operationId": "UsersController_getStats",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Statistics retrieved successfully"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get user statistics",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/{id}": {
      "get": {
        "operationId": "UsersController_findOne",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User retrieved successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get user by ID",
        "tags": [
          "Users"
        ]
      },
      "patch": {
        "operationId": "UsersController_update",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User updated successfully"
          },
          "404": {
            "description": "User not found"
          },
          "409": {
            "description": "Email already exists"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update user information",
        "tags": [
          "Users"
        ]
      },
      "delete": {
        "operationId": "UsersController_remove",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User deleted successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Soft delete user (set deleted flag)",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/{id}/status": {
      "patch": {
        "operationId": "UsersController_updateStatus",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateUserStatusDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User status updated successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Update user active/inactive status",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/{id}/reset-password": {
      "patch": {
        "operationId": "UsersController_resetPassword",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ResetPasswordDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Password reset successfully"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Reset user password (no current password required - admin only)",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/{id}/restore": {
      "patch": {
        "operationId": "UsersController_restore",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "User restored successfully"
          },
          "400": {
            "description": "User is not deleted"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Restore a deleted user",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/users/{id}/hard": {
      "delete": {
        "operationId": "UsersController_hardDelete",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "User permanently deleted"
          },
          "404": {
            "description": "User not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Permanently delete user",
        "tags": [
          "Users"
        ]
      }
    },
    "/api/files/upload": {
      "post": {
        "description": "Uploads a file directly to the backend, which handles S3 upload internally",
        "operationId": "FilesController_uploadFile",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary",
                    "description": "File to upload"
                  },
                  "category": {
                    "type": "string",
                    "enum": [
                      "MEMBERSHIP_APPLICATION",
                      "BUSINESS_LICENSE",
                      "FINANCIAL_REPORT",
                      "PAYMENT_PROOF",
                      "OTHER_DOCUMENT"
                    ],
                    "description": "File category"
                  },
                  "entityId": {
                    "type": "string",
                    "description": "ID of the entity this file belongs to"
                  },
                  "entityType": {
                    "type": "string",
                    "description": "Type of entity this file belongs to"
                  },
                  "folderPath": {
                    "type": "string",
                    "description": "Target folder path for upload (e.g., /Documents/Projects)"
                  }
                },
                "required": [
                  "file"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "File uploaded successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponseDto"
                }
              }
            }
          },
          "422": {
            "description": "Validation error or file type not allowed"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Upload file directly to backend",
        "tags": [
          "Files"
        ]
      }
    },
    "/api/files/{id}": {
      "get": {
        "description": "Retrieves file metadata by ID",
        "operationId": "FilesController_getFile",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File information retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FileResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "File not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get file information",
        "tags": [
          "Files"
        ]
      },
      "delete": {
        "description": "Deletes the file from both storage and the database",
        "operationId": "FilesController_deleteFile",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File deleted successfully"
          },
          "404": {
            "description": "File not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Delete file",
        "tags": [
          "Files"
        ]
      }
    },
    "/api/files/{id}/download": {
      "get": {
        "description": "Streams the file content directly from the server",
        "operationId": "FilesController_downloadFile",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "File content streamed",
            "content": {
              "application/octet-stream": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            }
          },
          "404": {
            "description": "File not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Download file",
        "tags": [
          "Files"
        ]
      }
    },
    "/api/files/{id}/download-url": {
      "get": {
        "description": "Get download URL for the file",
        "operationId": "FilesController_downloadFileUrl",
        "parameters": [
          {
            "name": "id",
            "required": true,
            "in": "path",
            "description": "File ID",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Download URL retrieved",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "downloadUrl": {
                      "type": "string",
                      "description": "Download URL for the file"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "File not found"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Download file url",
        "tags": [
          "Files"
        ]
      }
    },
    "/api/files": {
      "get": {
        "description": "Retrieves all files associated with a specific entity",
        "operationId": "FilesController_getFilesByEntity",
        "parameters": [
          {
            "name": "entityType",
            "required": true,
            "in": "query",
            "description": "Type of entity (e.g., User, LeaveRequest)",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "required": true,
            "in": "query",
            "description": "ID of the entity",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Files retrieved successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/FileResponseDto"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Get files by entity",
        "tags": [
          "Files"
        ]
      }
    },
    "/api/files/drives/{entityType}/{entityId}/folders": {
      "post": {
        "description": "Creates a new folder in the specified drive",
        "operationId": "FilesController_createFolder",
        "parameters": [
          {
            "name": "entityType",
            "required": true,
            "in": "path",
            "description": "Type of entity",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "entityId",
            "required": true,
            "in": "path",
            "description": "ID of the entity",
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateFolderDto"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Folder created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string"
                    },
                    "name": {
                      "type": "string"
                    },
                    "path": {
                      "type": "string"
                    },
                    "parentId": {
                      "type": "string"
                    },
                    "driveId": {
                      "type": "string"
                    },
                    "createdAt": {
                      "type": "string",
                      "format": "date-time"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Create folder",
        "tags": [
          "Files"
        ]
      }
    },
    "/api/files/attach": {
      "post": {
        "description": "Attach files uploaded with tempKey to a specific entity",
        "operationId": "FilesController_attachTempFiles",
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AttachFilesDto"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Files attached successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/AttachFilesResponseDto"
                }
              }
            }
          },
          "404": {
            "description": "No files found with the given tempKey"
          }
        },
        "security": [
          {
            "JWT-auth": []
          }
        ],
        "summary": "Attach temporary files to entity",
        "tags": [
          "Files"
        ]
      }
    }
  },
  "info": {
    "title": "Check-in System API",
    "description": "API documentation for the Check-in System",
    "version": "1.0",
    "contact": {}
  },
  "tags": [
    {
      "name": "Authentication",
      "description": "Login and user authentication"
    }
  ],
  "servers": [
    {
      "url": "http://localhost:3000",
      "description": "Development Server"
    },
    {
      "url": "http://localhost:3000",
      "description": "Deploy Server"
    }
  ],
  "components": {
    "securitySchemes": {
      "JWT-auth": {
        "scheme": "bearer",
        "bearerFormat": "JWT",
        "type": "http",
        "name": "JWT",
        "description": "Enter JWT token",
        "in": "header"
      }
    },
    "schemas": {
      "LoginDto": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "Email for login",
            "example": "admin@example.com"
          },
          "password": {
            "type": "string",
            "description": "Password for login",
            "example": "123!@#"
          }
        },
        "required": [
          "email",
          "password"
        ]
      },
      "RefreshTokenDto": {
        "type": "object",
        "properties": {
          "refreshToken": {
            "type": "string",
            "description": "Refresh token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
          }
        },
        "required": [
          "refreshToken"
        ]
      },
      "ChangePasswordDto": {
        "type": "object",
        "properties": {
          "currentPassword": {
            "type": "string",
            "description": "Current password",
            "example": "123!@#"
          },
          "newPassword": {
            "type": "string",
            "description": "New password",
            "example": "newPassword123!",
            "minLength": 6
          }
        },
        "required": [
          "currentPassword",
          "newPassword"
        ]
      },
      "CreateUserDto": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "description": "Full name of the user"
          },
          "email": {
            "type": "string",
            "description": "Email address for login",
            "uniqueItems": true
          },
          "password": {
            "type": "string",
            "description": "Password for the user",
            "minLength": 6
          },
          "role": {
            "type": "string",
            "description": "Role of the user",
            "enum": [
              "SUPER_ADMIN",
              "ADMIN",
              "MANAGEMENT",
              "MEMBER"
            ],
            "default": "MANAGEMENT"
          },
          "department": {
            "type": "string",
            "description": "Department of the user"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the user is active",
            "default": true
          }
        },
        "required": [
          "fullName",
          "email",
          "password",
          "role",
          "active"
        ]
      },
      "UpdateUserDto": {
        "type": "object",
        "properties": {
          "fullName": {
            "type": "string",
            "description": "Full name of the user"
          },
          "email": {
            "type": "string",
            "description": "Email address for login"
          },
          "password": {
            "type": "string",
            "description": "New password (will be hashed automatically)",
            "minLength": 6
          },
          "role": {
            "type": "string",
            "description": "Role of the user",
            "enum": [
              "SUPER_ADMIN",
              "ADMIN",
              "MANAGEMENT",
              "MEMBER"
            ]
          },
          "department": {
            "type": "string",
            "description": "Department of the user"
          },
          "active": {
            "type": "boolean",
            "description": "Whether the user is active"
          }
        }
      },
      "UpdateUserStatusDto": {
        "type": "object",
        "properties": {
          "active": {
            "type": "boolean",
            "description": "Whether the user should be active or inactive"
          }
        },
        "required": [
          "active"
        ]
      },
      "ResetPasswordDto": {
        "type": "object",
        "properties": {
          "newPassword": {
            "type": "string",
            "description": "New password for the user",
            "minLength": 6
          }
        },
        "required": [
          "newPassword"
        ]
      },
      "FileResponseDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "File ID"
          },
          "fileName": {
            "type": "string",
            "description": "File name"
          },
          "fileType": {
            "type": "string",
            "enum": [
              "IMAGE",
              "VIDEO",
              "AUDIO",
              "DOCUMENT",
              "PDF",
              "EXCEL",
              "OTHER"
            ],
            "description": "File type"
          },
          "storeType": {
            "type": "string",
            "enum": [
              "LOCAL",
              "S3"
            ],
            "description": "Storage type"
          },
          "mimeType": {
            "type": "string",
            "description": "MIME type"
          },
          "fileSize": {
            "type": "number",
            "description": "File size in bytes"
          },
          "storagePath": {
            "type": "string",
            "description": "Storage path or S3 key"
          },
          "publicUrl": {
            "type": "string",
            "description": "Public URL"
          },
          "checksum": {
            "type": "string",
            "description": "File checksum"
          },
          "entityType": {
            "type": "string",
            "description": "Entity type"
          },
          "entityId": {
            "type": "string",
            "description": "Entity ID"
          },
          "tempKey": {
            "type": "string",
            "description": "Temporary key for grouping files"
          },
          "category": {
            "type": "string",
            "description": "File category"
          },
          "description": {
            "type": "string",
            "description": "File description"
          },
          "folderId": {
            "type": "string",
            "description": "Folder ID"
          },
          "uploadedById": {
            "type": "string",
            "description": "Uploaded by user ID"
          },
          "visibility": {
            "type": "string",
            "enum": [
              "PUBLIC",
              "PRIVATE",
              "INTERNAL"
            ],
            "description": "File visibility"
          },
          "createdAt": {
            "format": "date-time",
            "type": "string",
            "description": "Creation date"
          },
          "updatedAt": {
            "format": "date-time",
            "type": "string",
            "description": "Last update date"
          },
          "deleted": {
            "type": "boolean",
            "description": "Whether file is deleted"
          }
        },
        "required": [
          "id",
          "fileName",
          "fileType",
          "storeType",
          "storagePath",
          "visibility",
          "createdAt",
          "updatedAt",
          "deleted"
        ]
      },
      "CreateFolderDto": {
        "type": "object",
        "properties": {
          "parentPath": {
            "type": "string",
            "description": "Parent folder path"
          },
          "name": {
            "type": "string",
            "description": "Folder name"
          }
        },
        "required": [
          "parentPath",
          "name"
        ]
      },
      "AttachFilesDto": {
        "type": "object",
        "properties": {
          "tempKey": {
            "type": "string",
            "description": "Temporary key to identify files to attach",
            "example": "temp_abc123"
          },
          "entityType": {
            "type": "string",
            "description": "Type of entity to attach files to",
            "example": "MEMBER"
          },
          "entityId": {
            "type": "string",
            "description": "ID of the entity to attach files to",
            "example": "uuid-member-id"
          }
        },
        "required": [
          "tempKey",
          "entityType",
          "entityId"
        ]
      },
      "AttachFilesResponseDto": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Success message"
          },
          "updatedCount": {
            "type": "number",
            "description": "Number of files updated"
          }
        },
        "required": [
          "message",
          "updatedCount"
        ]
      }
    }
  }
}